{% load static %}
// Base Service Worker implementation.  To use your own Service Worker, set the PWA_SERVICE_WORKER_TEMPLATE variable in settings.py

{% block pwa_init %}
var staticCacheKey = '{{ pwa_cache_key }}';
var staticCacheName = staticCacheKey + 'v' + new Date().getTime();

var offlineUrl = '{{ pwa_offline_url }}';
var filesToCache = [
    offlineUrl,
    '{% static "css/django-pwa-app.css" %}',
    {% for f in pwa_cached_files %}'{{ f }}',
    {% endfor %}
];
{% endblock pwa_init %}


{% block pwa_custom %}{% endblock pwa_custom %}


{% block pwa_listeners %}
// Cache on install
self.addEventListener('install', event => {
    this.skipWaiting();
    event.waitUntil(
        caches.open(staticCacheName)
            .then(cache => {
                return cache.addAll(filesToCache);
            })
    );
});

// Clear cache on activate
self.addEventListener('activate', event => {
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames
                    .filter(cacheName => (cacheName.startsWith(staticCacheKey)))
                    .filter(cacheName => (cacheName !== staticCacheName))
                    .map(cacheName => caches.delete(cacheName))
            );
        })
    );
});

// Serve from Cache
self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                return response || fetch(event.request);
            })
            .catch(() => {
                return caches.match(offlineUrl);
            })
    );
});
{% endblock pwa_listeners %}
